from logging import getLogger
from typing import TYPE_CHECKING, Any

from aiogram import F as _MF
from aiogram import Router, types
from aiogram.filters import Command
from dependency_injector.wiring import Provide, inject

from naualertsbot.stats import update_stats

if TYPE_CHECKING:
    from aiogram import Bot
    from redis.asyncio import Redis

logger = getLogger(__name__)

router = Router()


@inject
async def _is_subscribed(
    chat: types.Chat,
    redis: "Redis[Any]" = Provide["db.redis"],
) -> bool:
    """Check if chat is subscribed to bot.

    Args:
        chat: Chat instance.
        redis: Redis instance.

    Returns:
        True if chat is subscribed to bot.
    """
    subscribed_to_alerts = await redis.sismember("subscribers:alerts", chat.id)
    subscribed_to_weeks = await redis.sismember("subscribers:weeks", chat.id)
    return subscribed_to_alerts or subscribed_to_weeks


@router.message(Command("start"))
@inject
async def start(
    message: types.Message,
    bot: "Bot" = Provide["bot_context.bot"],
    redis: "Redis[Any]" = Provide["db.redis"],
) -> None:
    """Start bot.

    Args:
        message: Message instance.
        bot: Bot instance.
        redis: Redis instance.
    """
    me = await bot.me()
    if message.chat.type == "private":
        await message.answer(
            "üëã <b>–ü—Ä–∏–≤—ñ—Ç!</b> –Ø –±–æ—Ç, —è–∫–∏–π –±—É–¥–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –ù–ê–£ –≤ —á–∞—Ç–∞—Ö. "
            "–°—é–¥–∏ –≤—Ö–æ–¥—è—Ç—å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥—É –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —É–∫—Ä–∏—Ç—Ç—è —Ç–∞ "
            "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞–≤—á–∞–ª—å–Ω—ñ —Ç–∏–∂–Ω—ñ.\n\n"
            "‚öôÔ∏è –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ –º–æ–∂–Ω–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —á–µ—Ä–µ–∑ –º–µ–Ω—é.\n\n"
            "üîΩ –î–ª—è —Ç–æ–≥–æ, —â–æ–± —è –ø–æ—á–∞–≤ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –¥–æ–¥–∞–π—Ç–µ –º–µ–Ω–µ –≤ –≥—Ä—É–ø—É —á–µ—Ä–µ–∑ "
            "–∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="–î–æ–¥–∞—Ç–∏ –≤ –≥—Ä—É–ø—É",
                            url=f"https://t.me/{me.username}?startgroup=true",
                        ),
                    ],
                ],
            ),
        )
        return

    if message.chat.type not in {"group", "supergroup"}:
        return

    await update_stats(message.chat)

    if not message.from_user:
        return

    # check if user is admin
    chat_member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if chat_member.status not in {"administrator", "creator"}:
        return

    if await _is_subscribed(message.chat):
        await message.answer(
            "‚ùå <b>–ü–æ–º–∏–ª–∫–∞!</b>\n"
            "–í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É –±–æ—Ç–∞. –©–æ–± –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ "
            "–∫–æ–º–∞–Ω–¥—É /stop.",
        )
        return

    await redis.sadd("subscribers:alerts", message.chat.id)
    await redis.sadd("subscribers:weeks", message.chat.id)

    text = (
        "üéâ <b>–£—Å–ø—ñ—à–Ω–æ!</b>\n"
        "–©–æ–± –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /settings.\n"
        "–í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –≤—ñ–¥ —Ä–æ–∑—Å–∏–ª–∫–∏ - /stop.\n\n"
    )
    participant = await bot.get_chat_member(
        message.chat.id,
        (await bot.me()).id,
    )
    if not participant.can_delete_messages:
        text += (
            "üí† <b>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –±–æ—Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∑ –ø—Ä–∞–≤–æ–º "  # noqa: WPS336
            "–≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å!</b> –ë–µ–∑ —Ü—å–æ–≥–æ –Ω–µ –±—É–¥—É—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ "
            "–∫–æ–º–∞–Ω–¥–∏ /week —Ç–∞ /calendar."
        )

    await message.answer(text)


@router.message(Command("stop"))
@inject
async def stop(
    message: types.Message,
    bot: "Bot" = Provide["bot_context.bot"],
    redis: "Redis[Any]" = Provide["db.redis"],
) -> None:
    """Stop bot.

    Args:
        message: Message instance.
        bot: Bot instance.
        redis: Redis instance.
    """
    if message.chat.type == "private":
        await message.answer("‚ùå <b>–ü–æ–º–∏–ª–∫–∞!</b>\n–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø–∞—Ö.")
        return

    if message.chat.type not in {"group", "supergroup"}:
        return

    await update_stats(message.chat)

    if not message.from_user:
        return

    chat_member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if chat_member.status not in {"administrator", "creator"}:
        return

    if await _is_subscribed(message.chat):
        await redis.srem("subscribers:alerts", message.chat.id)
        await redis.srem("subscribers:weeks", message.chat.id)
        await message.answer(
            "‚úÖ <b>–í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –≤—ñ–¥ —Ä–æ–∑—Å–∏–ª–∫–∏!</b> –©–æ–± –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å, "
            "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.",
        )
        return

    await message.answer(
        "‚ùå <b>–ü–æ–º–∏–ª–∫–∞!</b>\n–í–∏ –Ω–µ –±—É–ª–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É –±–æ—Ç–∞. –©–æ–± "
        "–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.",
    )


# unsubscribe group when bot is removed from it
@router.message(_MF.left_chat_member)
@inject
async def group_leave(
    message: types.Message,
    bot: "Bot" = Provide["bot_context.bot"],
    redis: "Redis[Any]" = Provide["db.redis"],
) -> None:
    """Unsubscribe group when bot is removed from it.

    Args:
        message: Message instance.
        bot: Bot instance.
        redis: Redis instance.
    """
    if not message.left_chat_member:
        return

    if message.left_chat_member.id != (await bot.me()).id:
        return

    await redis.srem("subscribers:alerts", message.chat.id)
    await redis.srem("subscribers:weeks", message.chat.id)
    logger.info("Bot was removed from group %s", message.chat.id)
