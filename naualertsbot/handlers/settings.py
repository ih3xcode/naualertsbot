from enum import StrEnum
from logging import getLogger
from types import MappingProxyType
from typing import TYPE_CHECKING, Any

from aiogram import Router, types
from aiogram.exceptions import TelegramForbiddenError
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dependency_injector.wiring import Provide, inject

from naualertsbot.stats import update_stats

if TYPE_CHECKING:
    from aiogram import Bot
    from redis.asyncio import Redis

logger = getLogger(__name__)

router = Router()


class SettingsAction(StrEnum):
    """Settings action."""

    subscribe = "subscribe"
    unsubscribe = "unsubscribe"


class SettingsTarget(StrEnum):
    """Settings target."""

    alerts = "alerts"
    weeks = "weeks"


class SettingsActionData(CallbackData, prefix="settings"):
    """Settings action callback data class."""

    action: SettingsAction
    target: SettingsTarget


STATUS_SIGNS = MappingProxyType(
    {
        True: "‚úÖ",
        False: "‚ùå",
    },
)

ACTIONS = MappingProxyType(
    {
        True: SettingsAction.unsubscribe,
        False: SettingsAction.subscribe,
    },
)


@router.message(Command("settings"))
@inject
async def settings(
    message: types.Message,
    bot: "Bot" = Provide["bot_context.bot"],
    redis: "Redis[Any]" = Provide["db.redis"],
) -> None:
    """Show notification settings.

    Args:
        message: Message instance.
        bot: Bot instance.
        redis: Redis instance.
    """
    if message.chat.type == "private":
        await message.answer("‚ùå <b>–ü–æ–º–∏–ª–∫–∞!</b>\n–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø–∞—Ö.")
        return

    if message.chat.type not in {"group", "supergroup"}:
        return

    await update_stats(message.chat)

    if not message.from_user:
        return

    chat_member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if chat_member.status not in {"administrator", "creator"}:
        return

    alerts_sub = await redis.sismember("subscribers:alerts", message.chat.id)
    weeks_sub = await redis.sismember("subscribers:weeks", message.chat.id)

    builder = InlineKeyboardBuilder()
    builder.button(
        text=f"{STATUS_SIGNS[alerts_sub]} –¢—Ä–∏–≤–æ–≥–∞",
        callback_data=SettingsActionData(
            action=ACTIONS[alerts_sub],
            target=SettingsTarget.alerts,
        ),
    )
    builder.button(
        text=f"{STATUS_SIGNS[weeks_sub]} –ù–∞–≤—á–∞–ª—å–Ω—ñ —Ç–∏–∂–Ω—ñ",
        callback_data=SettingsActionData(
            action=ACTIONS[weeks_sub],
            target=SettingsTarget.weeks,
        ),
    )

    await message.answer(
        "üîß <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>\n\n"
        "–í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏, —è–∫—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤ —Ü—ñ–π –≥—Ä—É–ø—ñ. "
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ.",
        reply_markup=builder.as_markup(),
    )


@router.callback_query(SettingsActionData.filter())
@inject
async def settings_action(
    query: types.CallbackQuery,
    callback_data: SettingsActionData,
    bot: "Bot" = Provide["bot_context.bot"],
    redis: "Redis[Any]" = Provide["db.redis"],
) -> None:
    """Handle settings action.

    Args:
        query: CallbackQuery instance.
        callback_data: Callback data instance.
        bot: Bot instance.
        redis: Redis instance.
    """
    if not query.message:
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞!\n–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø–∞—Ö.")
        return

    if query.message.chat.type not in {"group", "supergroup"}:
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞!\n–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø–∞—Ö.")
        return

    if not query.from_user:
        await query.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞!\n–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.",
        )
        return

    await update_stats(query.message.chat)

    try:
        chat_member = await bot.get_chat_member(
            query.message.chat.id,
            query.from_user.id,
        )
    except TelegramForbiddenError:
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞!\n–Ø –Ω–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ –≤–∞—Å –≤ —Ü—ñ–π –≥—Ä—É–ø—ñ.")
        logger.debug("Ignoring callback action from unregistered chat")
        return

    if chat_member.status not in {"administrator", "creator"}:
        await query.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞!\n–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
        )
        return

    if callback_data.action == SettingsAction.subscribe:
        await redis.sadd(f"subscribers:{callback_data.target}", query.message.chat.id)
    elif callback_data.action == SettingsAction.unsubscribe:
        await redis.srem(f"subscribers:{callback_data.target}", query.message.chat.id)

    alerts_sub = await redis.sismember("subscribers:alerts", query.message.chat.id)
    weeks_sub = await redis.sismember("subscribers:weeks", query.message.chat.id)

    builder = InlineKeyboardBuilder()
    builder.button(
        text=f"{STATUS_SIGNS[alerts_sub]} –¢—Ä–∏–≤–æ–≥–∞",
        callback_data=SettingsActionData(
            action=ACTIONS[alerts_sub],
            target=SettingsTarget.alerts,
        ),
    )
    builder.button(
        text=f"{STATUS_SIGNS[weeks_sub]} –ù–∞–≤—á–∞–ª—å–Ω—ñ —Ç–∏–∂–Ω—ñ",
        callback_data=SettingsActionData(
            action=ACTIONS[weeks_sub],
            target=SettingsTarget.weeks,
        ),
    )

    await query.answer()
    await query.message.edit_text(
        "üîß <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>\n\n"
        "–í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏, —è–∫—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤ —Ü—ñ–π –≥—Ä—É–ø—ñ. "
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ.",
        reply_markup=builder.as_markup(),
    )
